// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.piirivalve.entities;

import ee.piirivalve.entities.Troops;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Troops_Roo_Entity {
    
    declare @type: Troops: @Entity;
    
    @PersistenceContext
    transient EntityManager Troops.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "_id")
    private Long Troops._id;
    
    @Version
    @Column(name = "version")
    private Integer Troops.version;
    
    public Long Troops.get_id() {
        return this._id;
    }
    
    public void Troops.set_id(Long id) {
        this._id = id;
    }
    
    public Integer Troops.getVersion() {
        return this.version;
    }
    
    public void Troops.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Troops.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Troops.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Troops attached = Troops.findTroops(this._id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Troops.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Troops.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Troops Troops.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Troops merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Troops.entityManager() {
        EntityManager em = new Troops().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Troops.countTroopses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Troops o", Long.class).getSingleResult();
    }
    
    public static List<Troops> Troops.findAllTroopses() {
        return entityManager().createQuery("SELECT o FROM Troops o", Troops.class).getResultList();
    }
    
    public static Troops Troops.findTroops(Long _id) {
        if (_id == null) return null;
        return entityManager().find(Troops.class, _id);
    }
    
    public static List<Troops> Troops.findTroopsEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Troops o", Troops.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
